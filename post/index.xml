<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fucking Life</title>
    <link>https://fuCking-Life.github.io/post/</link>
    <description>Recent content in Posts on Fucking Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Jul 2021 18:55:59 +0800</lastBuildDate><atom:link href="https://fuCking-Life.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cocoapods 私有库即私有组件搭建</title>
      <link>https://fuCking-Life.github.io/post/cocoapods/privatespecs/</link>
      <pubDate>Sun, 04 Jul 2021 18:55:59 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/cocoapods/privatespecs/</guid>
      <description>从本篇文章开始，会开始介绍关于cocoapods的东西，包括cocoapods的原理，私有库的搭建，包括组件化，解决耦合，二进制化，CI/CD，单元测试等。
一. 组件化的必要性 项目在发展的过程中肯定是越来越大的，业务也是越来越复杂。就按照我司的情况来说，现在还是在业务的快速发展当中，但是代码量已经非常大，并且引用的第三方库已经超过100个了。对于编译和打包来说现在都是一种灾难。经过测试，本地跑一次项目时间大概在10分钟左右。严重拖慢了开发效率，并且代码之间的结构不明晰，冗余的资源较多(代)。期待组件化等可以带来的收益如下。
  结构化代码，负责人可以负责对应的模块，对于该模块的代码熟悉程度高。    排除冗余资源，对应模块的负责人可以方便排除自己模块的冗余资源，在一定程度减少包体积。    提高编译速度，现在的代码都是全量编译的，是完全没有必要的。编译结果如果可以在各个模块开发结束时产生，主工程完全只需要集成各个模块的静态库就可以提高打包速度。    跟CI/CD结合，引入单元测试，规范coder编码规范，提高发版效率，及早发现问题。   二.</description>
    </item>
    
    <item>
      <title>shit_algorithm_index</title>
      <link>https://fuCking-Life.github.io/post/fuck_algorithm/fuck_algorithm_index/</link>
      <pubDate>Thu, 13 May 2021 09:36:45 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/fuck_algorithm/fuck_algorithm_index/</guid>
      <description>&lt;p&gt;作为一个算法渣渣，看到算法题只想fuck它们，但是奈何还是需要刷，只能写点儿题解，收集点典型的题目勉强度日了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些有用的网址合集</title>
      <link>https://fuCking-Life.github.io/post/some_webs/</link>
      <pubDate>Mon, 26 Apr 2021 14:12:01 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/some_webs/</guid>
      <description>GCK&amp;rsquo;S FILE SIGNATURES TABLE 想查询某个资源是什么类型的往往需要文件头的几个字节来判断。这里就是类型和头字节的对照表。
  http://iosres.com/ iOS的图片的尺寸，分辨率等信息</description>
    </item>
    
    <item>
      <title>iOS底层历险记-目录</title>
      <link>https://fuCking-Life.github.io/post/objc_essence_0/</link>
      <pubDate>Fri, 23 Apr 2021 21:55:05 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/objc_essence_0/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;现在的iOS开发已经进入到了后iOS开发时代，不再是那个会点网络请求、会拖个界面、会写个自定义控件就可以找个不错的工作的年代了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Objective-C 一、对象本质——对象的分类</title>
      <link>https://fuCking-Life.github.io/post/objc_essence_1/</link>
      <pubDate>Tue, 13 Apr 2021 22:07:09 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/objc_essence_1/</guid>
      <description>整个OC对象的分类可以分为以下三种：
   实例对象 instance    类对象 class    元类对象 meta-class    接下来呢，我要一一开始讨论三类对象，每个对象，都会从内存布局、源码分析等角度切入，然后扩展，说到哪儿算哪儿。</description>
    </item>
    
    <item>
      <title>Hugo的使用和主题的修改</title>
      <link>https://fuCking-Life.github.io/post/inithugo/</link>
      <pubDate>Sat, 10 Apr 2021 22:07:20 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/inithugo/</guid>
      <description>本人电脑是mac，所以仅仅按照mac的安装步骤阐述。
1. 安装git 和 brew 应该都要的，没有的请自行百度。
2. 安装Hugo    brew install hugo // 下载hugo    hugo new site blog //初始化站点，一般是在Users/目录下    https://themes.</description>
    </item>
    
    <item>
      <title>iOS内存缓存的方案比较</title>
      <link>https://fuCking-Life.github.io/post/memory_cache/</link>
      <pubDate>Tue, 11 Dec 2018 17:34:38 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/memory_cache/</guid>
      <description>&lt;p&gt;&lt;strong&gt;主要关注这三个框架的内存缓存。以及LRU算法的实现。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>weex(三)weex &amp; Native交互</title>
      <link>https://fuCking-Life.github.io/post/weex/weex3/</link>
      <pubDate>Tue, 05 Jun 2018 09:19:59 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/weex/weex3/</guid>
      <description>&lt;p&gt;weex与native的交互设计&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>weex(二)weex实时更新实现</title>
      <link>https://fuCking-Life.github.io/post/weex/weex2/</link>
      <pubDate>Mon, 21 May 2018 17:56:59 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/weex/weex2/</guid>
      <description>&lt;p&gt;weex第二篇主要关于hotreload&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>weex(一)环境搭建&#43;iOS现有项目集成</title>
      <link>https://fuCking-Life.github.io/post/weex/weex1/</link>
      <pubDate>Thu, 17 May 2018 11:43:59 +0800</pubDate>
      
      <guid>https://fuCking-Life.github.io/post/weex/weex1/</guid>
      <description>&lt;p&gt;weex第一篇主要关于环境搭建&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
